TestCase subclass: #AlgoVid105964Test	instanceVariableNames: 'algovid'	classVariableNames: ''	package: 'tp1-105964-Tests'!!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/21/2021 12:23'!test14AgregoAAlguienAUnaBurbujaQueNoExisteYDaError	algovid nuevaPersona: 'Julian'.	self should: [ algovid agregarA: 'Julian' aLaBurbuja: 'Ayudantes' ] raise: NombreInexistenteError.! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 16:13'!test21AgregoUnaBurbujaConNombreVacioYDaError		self should: [ algovid nuevaBurbuja: ''. ] raise: NombreVacioError .! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/17/2021 16:00'!test12EstaEnBurbujaPinchadaEstaVacunadaYNoPuedeCircular	algovid nuevaPersona: 'Lautaro'.	algovid nuevaPersona: 'Julia'.   algovid agregarSintoma: 'Dolor de garganta' a: 'Lautaro'.  algovid agregarSintoma: 'Dolor de cabeza' a: 'Lautaro'.  algovid agregarSintoma: 'Mocos' a: 'Lautaro'.  algovid agregarSintoma: 'Dolor muscular' a: 'Lautaro'.  self assert: (algovid diagnosticoDe: 'Lautaro') equals: 'Positivo'.   algovid nuevaBurbuja: 'Fisica 1'.  algovid agregarA: 'Lautaro' aLaBurbuja: 'Fisica 1'.   algovid agregarA: 'Julia' aLaBurbuja: 'Fisica 1'.   algovid estaVacunadx: 'Julia'.  self deny: (algovid puedeCircular: 'Julia').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 15:15'!test16VacunoAUnaPersonaDeRiesgoYNoPuedeCircular	algovid nuevaPersona: 'Lucia'.	algovid esPersonaDeRiesgo: 'Lucia'.	algovid estaVacunadx: 'Lucia'.		self deny: (algovid puedeCircular: 'Lucia').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 16:16'!test23EstaVacunadoYEsEscencialPuedeCircular	algovid nuevaPersona: 'Juan'.	algovid estaVacunadx: 'Juan'.	algovid esPersonalEsencial: 'Juan'.		self assert: (algovid puedeCircular: 'Juan').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/17/2021 15:45'!test07AgregoALaMismaBurbujaDosVecesYDaError	algovid nuevaBurbuja: 'Quinto Grado'.	self should: [ algovid nuevaBurbuja: 'Quinto Grado'] raise: DosNombresIgualesError.! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/17/2021 14:33'!test01AgregoUnaPersonaEscencialYPuedeCircular	algovid nuevaPersona: 'Martín'.   algovid esPersonalEsencial: 'Martín'.  self assert: (algovid puedeCircular: 'Martín').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 16:16'!test24EsDeRiesgoEstaVacunadoYEsEscencialNoPuedeCircular	algovid nuevaPersona: 'Juan'.	algovid esPersonaDeRiesgo: 'Juan'.	algovid estaVacunadx: 'Juan'.	algovid esPersonalEsencial: 'Juan'.		self deny: (algovid puedeCircular: 'Juan').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/17/2021 15:45'!test06AgregoALaMismaPersonaDosVecesYDaError	algovid nuevaPersona: 'Juan'.	self should: [ algovid nuevaPersona: 'Juan'] raise: DosNombresIgualesError.! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/21/2021 12:23'!test15AgregoAAlguienAUnColegioQueNoExisteYDaError	algovid nuevaPersona: 'Julian'.	self should: [ algovid agregarA: 'Julian' alColegio: 'UBA' ] raise: NombreInexistenteError.! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/20/2021 20:54'!test09UnContactoEstrechoEsVacunadoYNoPuedeCircular	algovid nuevaPersona: 'Lautaro'.   algovid agregarSintoma: 'Dolor de garganta' a: 'Lautaro'.  algovid agregarSintoma: 'Dolor de cabeza' a: 'Lautaro'.  algovid agregarSintoma: 'Mocos' a: 'Lautaro'.  algovid agregarSintoma: 'Dolor muscular' a: 'Lautaro'.  algovid nuevaPersona: 'Julia'.  algovid contactoEstrechoEntre: 'Julia' y: 'Lautaro'.  algovid estaVacunadx: 'Julia'.  self deny: (algovid puedeCircular: 'Julia').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/17/2021 15:06'!test05AgregoUnaPersonaConSintomasHabitualesYEsPositivo	algovid nuevaPersona: 'Lautaro'.  algovid estaVacunadx: 'Lautaro'.   algovid agregarSintoma: 'Fiebre' a: 'Lautaro'.  algovid agregarSintoma: 'Dolor de cabeza' a: 'Lautaro'.  algovid agregarSintoma: 'Mocos' a: 'Lautaro'.	  self assert: (algovid diagnosticoDe: 'Lautaro') equals: 'Positivo'. ! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/17/2021 15:47'!test08AgregoAlMismoColegioDosVecesYDaError	algovid nuevoColegio: 'UBA'.	self should: [ algovid nuevoColegio: 'UBA'] raise: DosNombresIgualesError.! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/17/2021 15:02'!test03AgregoUnaPersonaConSintomasVacunadaYNoPuedeCircular	algovid nuevaPersona: 'Martín'.	algovid agregarSintoma: 'Fiebre' a: 'Martín'.		algovid estaVacunadx: 'Martín'.  	self deny: (algovid puedeCircular: 'Martín').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/21/2021 12:23'!test13VacunoAAlguienQueNoExisteYDaError	self should: [ algovid estaVacunadx: 'Juan'] raise: NombreInexistenteError.! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 18:12'!test25El50PorcientoDeLasBurbujasEstanPinchadasNoHayClasesPresenciales  algovid nuevaPersona: 'Juan'.  algovid nuevaPersona: 'Pablo'.   algovid nuevaBurbuja: 'Fisica 2'.  algovid agregarA: 'Juan' aLaBurbuja: 'Fisica 2'.  algovid agregarA: 'Pablo' aLaBurbuja: 'Fisica 2'.  algovid nuevaPersona: 'Martín'.  algovid nuevaPersona: 'Julia'.  algovid nuevaBurbuja: 'Ayudantes'.  algovid agregarA: 'Martín' aLaBurbuja: 'Ayudantes'.  algovid agregarA: 'Julia' aLaBurbuja: 'Ayudantes'.		algovid nuevoColegio: 'UBA'.  algovid agregarA: 'Fisica 2' alColegio: 'UBA'.  algovid agregarA: 'Ayudantes' alColegio: 'UBA'.  algovid agregarSintoma: 'Fiebre' a: 'Julia'.  algovid agregarSintoma: 'Dolor de cabeza' a: 'Julia'.  algovid agregarSintoma: 'Tos' a: 'Julia'.  self deny: (algovid clasesPresencialesEn: 'UBA').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 15:24'!test17AgregoAUnaPersonaAUnaBurbujaYNoEstaPinchada	algovid nuevaPersona: 'Catalina'.	algovid nuevaBurbuja: 'Fisica 1'.		algovid agregarA: 'Catalina' aLaBurbuja: 'Fisica 1'.		self deny: (algovid burbujaPinchada: 'Fisica 1').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/17/2021 15:54'!test10UnContactoEstrechoEsEscencialYNoPuedeCircular	algovid nuevaPersona: 'Lautaro'.   algovid agregarSintoma: 'Dolor de garganta' a: 'Lautaro'.  algovid agregarSintoma: 'Dolor de cabeza' a: 'Lautaro'.  algovid agregarSintoma: 'Mocos' a: 'Lautaro'.  algovid agregarSintoma: 'Dolor muscular' a: 'Lautaro'.  self assert: (algovid diagnosticoDe: 'Lautaro') equals: 'Positivo'.   algovid nuevaPersona: 'Julia'.  algovid contactoEstrechoEntre: 'Julia' y: 'Lautaro'.  algovid esPersonalEsencial: 'Julia'.  self deny: (algovid puedeCircular: 'Julia').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/21/2021 12:37'!test27ClasesPresencialesEnUnColegioSinBurbujasDaError	algovid nuevoColegio: 'UBA'.   self should:  [algovid clasesPresencialesEn: 'UBA'] raise: ZeroDivide .! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 16:13'!test20AgregoUnaPersonaConNombreVacioYDaError		self should: [ algovid nuevaPersona: ''. ] raise: NombreVacioError .! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/17/2021 16:00'!test11EstaEnBurbujaPinchadaEsEscencialYNoPuedeCircular	algovid nuevaPersona: 'Lautaro'.	algovid nuevaPersona: 'Julia'.   algovid agregarSintoma: 'Dolor de garganta' a: 'Lautaro'.  algovid agregarSintoma: 'Dolor de cabeza' a: 'Lautaro'.  algovid agregarSintoma: 'Mocos' a: 'Lautaro'.  algovid agregarSintoma: 'Dolor muscular' a: 'Lautaro'.  self assert: (algovid diagnosticoDe: 'Lautaro') equals: 'Positivo'.   algovid nuevaBurbuja: 'Fisica 1'.  algovid agregarA: 'Lautaro' aLaBurbuja: 'Fisica 1'.   algovid agregarA: 'Julia' aLaBurbuja: 'Fisica 1'.   algovid esPersonalEsencial:  'Julia'.  self deny: (algovid puedeCircular: 'Julia').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 16:07'!test19AgregoAUnaPersonaAUnaBurbujaPinchadaYNoPuedeCircular	algovid nuevaPersona: 'Catalina'.	algovid nuevaPersona: 'Facundo'.	algovid nuevaBurbuja: 'Fisica 1'.		algovid agregarA: 'Catalina' aLaBurbuja: 'Fisica 1'.	algovid agregarA: 'Facundo' aLaBurbuja: 'Fisica 1'.	algovid agregarSintoma: 'Fiebre' a: 'Catalina'.	algovid agregarSintoma: 'Tos' a: 'Catalina'.	algovid agregarSintoma: 'Mocos' a: 'Catalina'.	algovid estaVacunadx: 'Facundo'.		self deny: (algovid puedeCircular: 'Facundo').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 18:13'!test26NoHayBurbujasPinchadasHayClasesPresenciales  algovid nuevaPersona: 'Juan'.  algovid nuevaPersona: 'Pablo'.   algovid nuevaBurbuja: 'Fisica 2'.  algovid agregarA: 'Juan' aLaBurbuja: 'Fisica 2'.  algovid agregarA: 'Pablo' aLaBurbuja: 'Fisica 2'.  algovid nuevaPersona: 'Martín'.  algovid nuevaPersona: 'Julia'.  algovid nuevaBurbuja: 'Ayudantes'.  algovid agregarA: 'Martín' aLaBurbuja: 'Ayudantes'.  algovid agregarA: 'Julia' aLaBurbuja: 'Ayudantes'.		algovid nuevoColegio: 'UBA'.  algovid agregarA: 'Fisica 2' alColegio: 'UBA'.  algovid agregarA: 'Ayudantes' alColegio: 'UBA'.  self assert: (algovid clasesPresencialesEn: 'UBA').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 15:26'!test18AgregoAUnaPersonaAUnaBurbujaSinPincharYNoPuedeCircular	algovid nuevaPersona: 'Catalina'.	algovid nuevaBurbuja: 'Fisica 1'.		algovid agregarA: 'Catalina' aLaBurbuja: 'Fisica 1'.		self deny: (algovid puedeCircular: 'Catalina').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 16:13'!test22AgregoUnColegioConNombreVacioYDaError		self should: [ algovid nuevoColegio: ''. ] raise: NombreVacioError .! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/21/2021 14:10'!test28EsContactoEstrechoEstaVacunadoYEsEscencialNoPuedeCircular	algovid nuevaPersona: 'Juan'.	algovid nuevaPersona: 'Maria'.	algovid contactoEstrechoEntre: 'Maria' y: 'Juan'.	algovid estaVacunadx: 'Juan'.	algovid esPersonalEsencial: 'Juan'.		self deny: (algovid puedeCircular: 'Juan').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/21/2021 14:06'!test04AgregoUnaPersonaConUnSintomaEsSospechosaYNoPuedeCircular	algovid nuevaPersona: 'Martín'.	algovid agregarSintoma: 'Fiebre' a: 'Martín'.		algovid esPersonalEsencial: 'Martín'.  	self deny: (algovid puedeCircular: 'Martín').! !!AlgoVid105964Test methodsFor: 'tests' stamp: 'LuciaLiceri 5/17/2021 15:00'!test02AgregoUnaPersonaEscencialConSintomasYNoPuedeCircular	algovid nuevaPersona: 'Martín'.   	algovid esPersonalEsencial: 'Martín'.	algovid agregarSintoma: 'Fiebre' a: 'Martín'.  	self deny: (algovid puedeCircular: 'Martín').! !!AlgoVid105964Test methodsFor: 'running' stamp: 'LuciaLiceri 5/17/2021 14:32'!setUp	algovid := AlgoVid new.! !TestCase subclass: #BurbujaTest	instanceVariableNames: 'algovid unaBurbuja unaPersona'	classVariableNames: ''	package: 'tp1-105964-Tests'!!BurbujaTest methodsFor: 'running' stamp: 'LuciaLiceri 5/18/2021 17:58'!setUp	unaBurbuja := Burbuja new.	unaPersona := Persona new.! !!BurbujaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 17:54'!test05LaBurbujaSeCreaSinPinchar	self deny: (unaBurbuja estaPinchada).! !!BurbujaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 17:54'!test04SiPinchoLaBurbujaEstaPinchada	unaBurbuja pincharBurbuja.			self assert: (unaBurbuja estaPinchada ).! !!BurbujaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 17:59'!test02AgregoUnaPersonaSospechosaALaBurbujaYNoEstaPinchada	unaBurbuja agregarA: unaPersona.	unaPersona agregarSintoma: 'Fiebre'.		self deny: (unaBurbuja estaPinchada ).! !!BurbujaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 17:59'!test01AgregoUnaPersonaALaBurbujaYNoEstaPinchada	unaBurbuja agregarA: unaPersona.		self deny: (unaBurbuja estaPinchada ).! !!BurbujaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 17:59'!test03AgregoUnaPersonaConfirmadaALaBurbujaYEstaPinchada	unaBurbuja agregarA: unaPersona.	unaPersona agregarSintoma: 'Fiebre'.	unaPersona agregarSintoma: 'Tos'.	unaPersona agregarSintoma: 'Dolor de cabeza'.			self assert: (unaBurbuja estaPinchada ).! !!BurbujaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 18:51'!test06AgregoUnaPersonaRepetidaYDaError	unaBurbuja agregarA: unaPersona.		self should: [ unaBurbuja agregarA: unaPersona ] raise: PersonaRepetidaError .! !TestCase subclass: #ColegioTest	instanceVariableNames: 'algovid unColegio unaBurbuja'	classVariableNames: ''	package: 'tp1-105964-Tests'!!ColegioTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 18:00'!test02El100porcientoDeLasBurbujasEstanPichadasYLasClasesNoSonPresenciales	unColegio agregarA: unaBurbuja.	unaBurbuja pincharBurbuja.	self deny: (unColegio hayClasesPresenciales).! !!ColegioTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 18:04'!test03El50porcientoDeLasBurbujasEstanPichadasYLasClasesNoSonPresenciales	|otraBurbuja|	otraBurbuja := Burbuja new.	otraBurbuja pincharBurbuja.	unColegio agregarA: otraBurbuja.	unColegio agregarA: unaBurbuja.	self deny: (unColegio hayClasesPresenciales).! !!ColegioTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 18:49'!test05AgregoUnaBurbujaRepetidaYDaError	unColegio agregarA: unaBurbuja.		self should: [ unColegio agregarA: unaBurbuja ] raise: BurbujaRepetidaError .! !!ColegioTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 18:04'!test04El33porcientoDeLasBurbujasEstanPichadasYLasClasesSonPresenciales	|otraBurbuja unaBurbujaMas|	otraBurbuja := Burbuja new.	unaBurbujaMas := Burbuja new.	unColegio agregarA: otraBurbuja.	unColegio agregarA: unaBurbujaMas .	unColegio agregarA: unaBurbuja.	unaBurbuja pincharBurbuja.		self assert: (unColegio hayClasesPresenciales).! !!ColegioTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 18:00'!test01AgregoUnaBurbujaYLasClasesSonPresenciales	unColegio agregarA: unaBurbuja.		self assert: (unColegio hayClasesPresenciales).! !!ColegioTest methodsFor: 'running' stamp: 'LuciaLiceri 5/18/2021 17:59'!setUp	unColegio := Colegio new.	unaBurbuja := Burbuja new.! !TestCase subclass: #PersonaSaludableTest	instanceVariableNames: 'personaSaludable'	classVariableNames: ''	package: 'tp1-105964-Tests'!!PersonaSaludableTest methodsFor: 'running' stamp: 'LuciaLiceri 5/18/2021 18:26'!setUp	personaSaludable := PersonaSaludable new.! !!PersonaSaludableTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 18:31'!test02ElDiagnosticoDeUnaPersonaSaludableEsSaludable		self assert: (personaSaludable resultado) equals: 'Saludable'.! !!PersonaSaludableTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 18:28'!test01UnaPersonaSaludablePuedePermitirCircular	|unaPersona|		unaPersona := Persona new.		personaSaludable puedeCircular: unaPersona.		self assert: (unaPersona puedeCircular).! !TestCase subclass: #PersonaTest	instanceVariableNames: 'algovid unaPersona'	classVariableNames: ''	package: 'tp1-105964-Tests'!!PersonaTest methodsFor: 'running' stamp: 'LuciaLiceri 5/18/2021 16:21'!setUp	unaPersona := Persona new.! !!PersonaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 16:47'!test08UnaPersonaConDosSintomasEsSospechosa	unaPersona agregarSintoma: 'Fiebre'.	unaPersona agregarSintoma: 'Dolor de cabeza'.			self assert: (unaPersona obtenerDiagnostico) equals: 'Sospechoso'.! !!PersonaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/21/2021 14:04'!test11TuvoContactoEstrechoNoPuedeCircular	unaPersona tuvoContactoEstrecho.	unaPersona vacunar .		self deny: (unaPersona puedeCircular).! !!PersonaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 16:35'!test06UnaPersonaEsPersonaDeRiesgoEscencialNoPuedeCircular	unaPersona esPersonaDeRiesgo.	unaPersona esEscencial.	self deny: (unaPersona puedeCircular).	! !!PersonaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 16:30'!test02UnaPersonaVacunadaPuedeCircular	unaPersona vacunar.	self assert: (unaPersona puedeCircular).	! !!PersonaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 17:02'!test10UnaPersonaVacunadaEstaEnUnaBurbujaYPuedeCircular	| unaBurbuja |	unaBurbuja := Burbuja new.	unaBurbuja nombre: 'Ayudantes'.	unaPersona estaEnLaBurbuja: unaBurbuja.	unaPersona vacunar.			self assert: (unaPersona puedeCircular).! !!PersonaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 16:35'!test05UnaPersonaEsPersonaDeRiesgoVacunadaNoPuedeCircular	unaPersona esPersonaDeRiesgo.	unaPersona vacunar.	self deny: (unaPersona puedeCircular).	! !!PersonaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/21/2021 14:13'!test14UnaPersonaConCuatroSintomasEsPositivaVacunadaYNoPuedeCircular	unaPersona agregarSintoma: 'Fiebre'.	unaPersona agregarSintoma: 'Dolor de cabeza'.	unaPersona agregarSintoma: 'Mocos'.	unaPersona agregarSintoma: 'Dolor de cuerpo'.	unaPersona vacunar.		self deny: (unaPersona puedeCircular).! !!PersonaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 16:31'!test03UnaPersonaEscencialPuedeCircular	unaPersona esEscencial.	self assert: (unaPersona puedeCircular).	! !!PersonaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 17:06'!test13UnaPersonaConfirmadaEscencialNoPuedeCircular	unaPersona agregarSintoma: 'Fiebre'.	unaPersona agregarSintoma: 'Dolor de cabeza'.	unaPersona esEscencial .	unaPersona agregarSintoma: 'Mocos'.	unaPersona agregarSintoma: 'Dolor de cuerpo'.		self deny: (unaPersona puedeCircular ).! !!PersonaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 16:32'!test04UnaPersonaEsPersonaDeRiesgoNoPuedeCircular	unaPersona esPersonaDeRiesgo.	self deny: (unaPersona puedeCircular).	! !!PersonaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 17:05'!test12UnaPersonaSospechosaVacunadaNoPuedeCircular	unaPersona agregarSintoma: 'Fiebre'.	unaPersona agregarSintoma: 'Dolor de cabeza'.	unaPersona vacunar.			self deny: (unaPersona puedeCircular ).! !!PersonaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 16:46'!test07UnaPersonaConUnSintomaEsSospechosa	unaPersona agregarSintoma: 'Fiebre'.		self assert: (unaPersona obtenerDiagnostico) equals: 'Sospechoso'.! !!PersonaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 16:28'!test01UnaPersonaNoPuedeCircularPorDefault	self deny: (unaPersona puedeCircular).! !!PersonaTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 16:48'!test09UnaPersonaConCuatroSintomasEsPositiva	unaPersona agregarSintoma: 'Fiebre'.	unaPersona agregarSintoma: 'Dolor de cabeza'.	unaPersona agregarSintoma: 'Mocos'.	unaPersona agregarSintoma: 'Dolor de cuerpo'.			self assert: (unaPersona obtenerDiagnostico) equals: 'Positivo'.! !TestCase subclass: #SaludTest	instanceVariableNames: 'salud'	classVariableNames: ''	package: 'tp1-105964-Tests'!!SaludTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 18:41'!test06UnSintomaRepetidoDaError	salud agregarSintoma: 'Fiebre'.	self should: [ salud agregarSintoma: 'Fiebre' ] raise: SintomaRepetidoError.! !!SaludTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 18:21'!test02UnSintomaDaUnDiagnosticoSospechoso	salud agregarSintoma: 'Fiebre'.	self assert: (salud obtenerDiagnostico) equals: 'Sospechoso'. ! !!SaludTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 18:22'!test03CuatroSintomasDaUnDiagnosticoPositivo	salud agregarSintoma: 'Fiebre'.	salud agregarSintoma: 'Mocos'.	salud agregarSintoma: 'Dolor de cuerpo'.	salud agregarSintoma: 'Cansancio'.	self assert: (salud obtenerDiagnostico) equals: 'Positivo'. ! !!SaludTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 18:22'!test04TresSintomasPeroUnoHabitualDaUnDiagnosticoPositivo	salud agregarSintoma: 'Fiebre'.	salud agregarSintoma: 'Mocos'.	salud agregarSintoma: 'Dolor de cuerpo'.	self assert: (salud obtenerDiagnostico) equals: 'Positivo'. ! !!SaludTest methodsFor: 'tests' stamp: 'LuciaLiceri 5/18/2021 18:18'!test01ElDiagnosticoEsSaludablePorDefault	self assert: (salud obtenerDiagnostico) equals: 'Saludable'.! !!SaludTest methodsFor: 'running' stamp: 'LuciaLiceri 5/18/2021 18:16'!setUp	salud := Salud new.! !